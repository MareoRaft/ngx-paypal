{"version":3,"sources":["webpack:///./demo/$_lazy_route_resource lazy namespace object","webpack:///./demo/main.ts","webpack:///./demo/src/api.component.html","webpack:///./demo/src/api.component.ts","webpack:///./demo/src/app.component.html","webpack:///./demo/src/app.component.ts","webpack:///./demo/src/demo.module.ts","webpack:///./demo/src/demo.routes.ts","webpack:///./demo/src/main.component.html","webpack:///./demo/src/main.component.ts","webpack:///./src/components/paypal-component.ts","webpack:///./src/index.ts","webpack:///./src/models/paypal-environment.ts","webpack:///./src/models/paypal-funding.ts","webpack:///./src/models/paypal-integration.ts","webpack:///./src/models/paypal-models.ts","webpack:///./src/ngx-paypal.module.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./demo/$$_lazy_route_resource lazy recursive\";","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { DemoModule } from './src/demo.module';\r\n\r\nplatformBrowserDynamic().bootstrapModule(DemoModule)\r\n  .catch(err => console.log(err));\r\n","module.exports = \"<h2 class=\\\"content-head is-center\\\">\\r\\n    Api\\r\\n</h2>\\r\\n\\r\\n<div class=\\\"pure-g\\\">\\r\\n    <div class=\\\"l-box pure-u-1\\\">\\r\\n        To use PayPal component, you need to provide it with\\r\\n        <strong>PayPalConfig</strong> model where you can define all supported properties. For explanation of what these properties\\r\\n        do and how they should be used, please refer to official PayPal documentation:\\r\\n\\r\\n        <div style=\\\"margin-top: 15px\\\">\\r\\n            <a href=\\\"https://developer.paypal.com/demo/checkout/#/pattern/client\\\" target=\\\"_blank\\\">\\r\\n                <button class=\\\"pure-button\\\">Client side integration</button>\\r\\n            </a>\\r\\n        </div>\\r\\n        <div style=\\\"margin-top: 15px\\\">\\r\\n            <a href=\\\"https://developer.paypal.com/demo/checkout/#/pattern/server\\\" target=\\\"_blank\\\">\\r\\n                <button class=\\\"pure-button\\\">Server side integration</button>\\r\\n            </a>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"l-box pure-u-1\\\">\\r\\n        <h3 class=\\\"content-subhead\\\">\\r\\n            PayPalConfig\\r\\n        </h3>\\r\\n        <table class=\\\"pure-table\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th>Property</th>\\r\\n                    <th>Type</th>\\r\\n                    <th>Description</th>\\r\\n                    <th>Required for</th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n\\r\\n            <tbody>\\r\\n                <tr>\\r\\n                    <td>integrationType</td>\\r\\n                    <td>PayPalIntegrationType</td>\\r\\n                    <td>Type of the integration (client | server)</td>\\r\\n                    <td>Both</td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>environment</td>\\r\\n                    <td>PayPalEnvironment</td>\\r\\n                    <td>Environment (sandbox | production)</td>\\r\\n                    <td>Both</td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>commit</td>\\r\\n                    <td>boolean</td>\\r\\n                    <td>Show 'Pay Now' button config</td>\\r\\n                    <td></td>\\r\\n                </tr>\\r\\n\\r\\n                <tr>\\r\\n                    <td>payment</td>\\r\\n                    <td>() => Observable&lt;string></td>\\r\\n                    <td>Called to create new payment for server side integration</td>\\r\\n                    <td>Server side integration</td>\\r\\n                </tr>\\r\\n\\r\\n                <tr>\\r\\n                    <td>onAuthorize</td>\\r\\n                    <td>data: IPayPalPaymentCompleteData, actions: any) => Observable&lt;void></td>\\r\\n                    <td>Called to execute payment for server side integration</td>\\r\\n                    <td>Server side integration</td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>client</td>\\r\\n                    <td>IPaypalClient</td>\\r\\n                    <td>Client tokens for client side integration</td>\\r\\n                    <td>Client side integration</td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>transactions</td>\\r\\n                    <td>IPayPalTransaction[]</td>\\r\\n                    <td>Array of transaction, required for client side integration</td>\\r\\n                    <td>Client side integration</td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>onPaymentComplete</td>\\r\\n                    <td>(data: IPayPalPaymentCompleteData, actions: any) => void</td>\\r\\n                    <td>Called for client side integration when payment is executed</td>\\r\\n                    <td></td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>onPaymentComplete</td>\\r\\n                    <td>(data: IPayPalPaymentCompleteData, actions: any) => void</td>\\r\\n                    <td>Called for client side integration when payment is executed</td>\\r\\n                    <td>Client side integration</td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>button</td>\\r\\n                    <td>IPayPalButtonStyle</td>\\r\\n                    <td>Button configuration</td>\\r\\n                    <td></td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>funding</td>\\r\\n                    <td>IPayPalFunding</td>\\r\\n                    <td>Paypal funding configuration</td>\\r\\n                    <td></td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>onError</td>\\r\\n                    <td>(err: any) => void</td>\\r\\n                    <td>Called when PayPal experiences an error</td>\\r\\n                    <td></td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>onCancel</td>\\r\\n                    <td>(data: IPayPalCancelPayment, actions: any) => void</td>\\r\\n                    <td>Called when user cancels payment</td>\\r\\n                    <td></td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\"","import { AfterViewChecked, Component, OnInit } from '@angular/core';\r\n\r\nimport { PayPalConfig, PayPalEnvironment, PayPalIntegrationType } from '../../src';\r\n\r\ndeclare var PR: any;\r\n\r\n@Component({\r\n  templateUrl: './api.component.html',\r\n})\r\nexport class ApiComponent implements OnInit, AfterViewChecked {\r\n\r\n  public payPalConfig?: PayPalConfig;\r\n\r\n  public readonly installCode = `npm install ngx-paypal --save`;\r\n\r\n  public readonly htmlCode = `\r\n  <ngx-paypal [config]=\"payPalConfig\"></ngx-paypal>\r\n  `;\r\n\r\n  public readonly tsCode = `\r\n  import { Component, OnInit } from '@angular/core';\r\n\r\n  import { PayPalConfig, PayPalEnvironment, PayPalIntegrationType } from 'ngx-paypal';\r\n\r\n  @Component({\r\n    templateUrl: './main.component.html',\r\n  })\r\n  export class MainComponent implements OnInit {\r\n\r\n    public payPalConfig?: PayPalConfig;\r\n\r\n    ngOnInit(): void {\r\n      this.initConfig();\r\n    }\r\n\r\n    private initConfig(): void {\r\n      this.payPalConfig = new PayPalConfig(PayPalIntegrationType.ClientSideREST, PayPalEnvironment.Sandbox, {\r\n        commit: true,\r\n        client: {\r\n          sandbox: 'AZDxjDScFpQtjWTOUtWKbyN_bDt4OgqaF4eYXlewfBP4-8aqX3PiV8e1GWU6liB2CUXlkA59kJXE7M6R'\r\n        },\r\n        button: {\r\n          label: 'paypal',\r\n        },\r\n        onPaymentComplete: (data, actions) => {\r\n          console.log('OnPaymentComplete');\r\n        },\r\n        onCancel: (data, actions) => {\r\n          console.log('OnCancel');\r\n        },\r\n        onError: (err) => {\r\n          console.log('OnError');\r\n        },\r\n        transactions: [{\r\n          amount: {\r\n            currency: 'USD',\r\n            total: 9\r\n          }\r\n        }]\r\n      });\r\n    }\r\n  }\r\n  `;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initConfig();\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.prettify();\r\n  }\r\n\r\n  private initConfig(): void {\r\n    this.payPalConfig = new PayPalConfig(PayPalIntegrationType.ClientSideREST, PayPalEnvironment.Sandbox, {\r\n      commit: true,\r\n      client: {\r\n        sandbox: 'AZDxjDScFpQtjWTOUtWKbyN_bDt4OgqaF4eYXlewfBP4-8aqX3PiV8e1GWU6liB2CUXlkA59kJXE7M6R'\r\n      },\r\n      button: {\r\n        label: 'paypal',\r\n      },\r\n      onPaymentComplete: (data, actions) => {\r\n        console.log('OnPaymentComplete');\r\n      },\r\n      onCancel: (data, actions) => {\r\n        console.log('OnCancel');\r\n      },\r\n      onError: (err) => {\r\n        console.log('OnError');\r\n      },\r\n      transactions: [{\r\n        amount: {\r\n          currency: 'USD',\r\n          total: 9\r\n        }\r\n      }]\r\n    });\r\n  }\r\n\r\n  private prettify(): void {\r\n    if (window['PR']) {\r\n      PR.prettyPrint();\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"header\\\">\\r\\n    <div class=\\\"home-menu pure-menu pure-menu-horizontal pure-menu-fixed\\\">\\r\\n        <a class=\\\"pure-menu-heading\\\" href=\\\"\\\">PayPal for Angular 6+</a>\\r\\n\\r\\n        <ul class=\\\"pure-menu-list\\\">\\r\\n            <li class=\\\"pure-menu-item\\\">\\r\\n                <a [routerLink]=\\\"['/']\\\" class=\\\"pure-menu-link\\\">Getting started</a>\\r\\n            </li>\\r\\n            <li class=\\\"pure-menu-item\\\">\\r\\n                <a [routerLink]=\\\"['/api']\\\" class=\\\"pure-menu-link\\\">Api</a>\\r\\n            </li>\\r\\n            <li class=\\\"pure-menu-item\\\">\\r\\n                <a href=\\\"https://github.com/Enngage/ngx-paypal\\\" target=\\\"_blank\\\" class=\\\"pure-menu-link\\\">GitHub</a>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-wrapper\\\">\\r\\n    <div class=\\\"content\\\">\\r\\n        <router-outlet>\\r\\n        </router-outlet>\\r\\n    </div>\\r\\n    <div class=\\\"footer l-box is-center\\\">\\r\\n        Star on GitHub to help further development and show support\\r\\n    </div>\\r\\n</div>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n\r\n  public year = new Date().getFullYear();\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { NgxPayPalModule } from '../../src';\r\nimport { ApiComponent } from './api.component';\r\nimport { AppComponent } from './app.component';\r\nimport { DemoRoutes } from './demo.routes';\r\nimport { MainComponent } from './main.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule,\r\n    BrowserModule,\r\n    NgxPayPalModule,\r\n    DemoRoutes\r\n  ],\r\n  declarations: [\r\n    AppComponent,\r\n    MainComponent,\r\n    ApiComponent\r\n  ],\r\n\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class DemoModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { ApiComponent } from './api.component';\r\nimport { MainComponent } from './main.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n    ],\r\n    imports: [\r\n        RouterModule.forRoot([\r\n            {\r\n                path: '', component: MainComponent\r\n            },\r\n            {\r\n                path: 'api', component: ApiComponent\r\n            },\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class DemoRoutes { }\r\n","module.exports = \"<h2 class=\\\"content-head is-center\\\">\\r\\n    Getting started\\r\\n</h2>\\r\\n\\r\\n<div class=\\\"pure-g\\\">\\r\\n\\r\\n    <div class=\\\"l-box pure-u-1\\\">\\r\\n        <h3 class=\\\"content-subhead\\\">\\r\\n            Live example (client side integration)\\r\\n        </h3>\\r\\n        <ngx-paypal [config]=\\\"payPalConfig\\\"></ngx-paypal>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"l-box pure-u-1\\\">\\r\\n        <h3 class=\\\"content-subhead\\\">\\r\\n            Install\\r\\n        </h3>\\r\\n        <pre class=\\\"prettyprint\\\" [innerText]=\\\"installCode\\\"></pre>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"l-box pure-u-1\\\">\\r\\n        <h3 class=\\\"content-subhead\\\">\\r\\n            .html\\r\\n        </h3>\\r\\n        <pre class=\\\"prettyprint\\\" [innerText]=\\\"htmlCode\\\"></pre>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"l-box pure-u-1\\\">\\r\\n        <h3 class=\\\"content-subhead\\\">\\r\\n            .ts\\r\\n        </h3>\\r\\n        <pre class=\\\"prettyprint\\\" [innerText]=\\\"tsCode\\\"></pre>\\r\\n    </div>\\r\\n\\r\\n</div>\"","import { AfterViewChecked, Component, OnInit } from '@angular/core';\r\n\r\nimport { PayPalConfig, PayPalEnvironment, PayPalIntegrationType } from '../../src';\r\n\r\ndeclare var PR: any;\r\n\r\n@Component({\r\n  templateUrl: './main.component.html',\r\n})\r\nexport class MainComponent implements OnInit, AfterViewChecked {\r\n\r\n  public payPalConfig?: PayPalConfig;\r\n\r\n  public readonly installCode = `npm install ngx-paypal --save`;\r\n\r\n  public readonly htmlCode = `\r\n  <ngx-paypal [config]=\"payPalConfig\"></ngx-paypal>\r\n  `;\r\n\r\n  public readonly tsCode = `\r\n  import { Component, OnInit } from '@angular/core';\r\n  import { PayPalConfig, PayPalEnvironment, PayPalIntegrationType } from '../ngx-paypal';\r\n\r\n  @Component({\r\n    templateUrl: './main.component.html',\r\n  })\r\n  export class MainComponent implements OnInit {\r\n\r\n    public payPalConfig?: PayPalConfig;\r\n\r\n    ngOnInit(): void {\r\n      this.initConfig();\r\n    }\r\n\r\n    private initConfig(): void {\r\n      this.payPalConfig = new PayPalConfig(PayPalIntegrationType.ClientSideREST, PayPalEnvironment.Sandbox, {\r\n        commit: true,\r\n        client: {\r\n          sandbox: 'yourSandboxKey'\r\n        },\r\n        button: {\r\n          label: 'paypal',\r\n        },\r\n        onPaymentComplete: (data, actions) => {\r\n          console.log('OnPaymentComplete');\r\n        },\r\n        onCancel: (data, actions) => {\r\n          console.log('OnCancel');\r\n        },\r\n        onError: (err) => {\r\n          console.log('OnError');\r\n        },\r\n        transactions: [{\r\n          amount: {\r\n            currency: 'USD',\r\n            total: 9\r\n          }\r\n        }]\r\n      });\r\n    }\r\n  }\r\n  `;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initConfig();\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.prettify();\r\n  }\r\n\r\n  private initConfig(): void {\r\n    this.payPalConfig = new PayPalConfig(PayPalIntegrationType.ClientSideREST, PayPalEnvironment.Sandbox, {\r\n      commit: true,\r\n      client: {\r\n        sandbox: 'AZDxjDScFpQtjWTOUtWKbyN_bDt4OgqaF4eYXlewfBP4-8aqX3PiV8e1GWU6liB2CUXlkA59kJXE7M6R'\r\n      },\r\n      button: {\r\n        label: 'paypal',\r\n      },\r\n      onPaymentComplete: (data, actions) => {\r\n        console.log('OnPaymentComplete');\r\n      },\r\n      onCancel: (data, actions) => {\r\n        console.log('OnCancel');\r\n      },\r\n      onError: (err) => {\r\n        console.log('OnError');\r\n      },\r\n      transactions: [{\r\n        amount: {\r\n          currency: 'USD',\r\n          total: 9\r\n        }\r\n      }]\r\n    });\r\n  }\r\n\r\n  private prettify(): void {\r\n    if (window['PR']) {\r\n      PR.prettyPrint();\r\n    }\r\n  }\r\n\r\n}\r\n","import { AfterViewChecked, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from '@angular/core';\r\n\r\nimport { PayPalFunding } from '../models/paypal-funding';\r\nimport { PayPalIntegrationType } from '../models/paypal-integration';\r\nimport { IPaypalClient, IPayPalPaymentCompleteData, PayPalConfig } from '../models/paypal-models';\r\n\r\n/**\r\n * Global variable where PayPal is loaded to\r\n */\r\ndeclare var paypal: any;\r\n\r\n@Component({\r\n    selector: 'ngx-paypal',\r\n    template: `\r\n    <div #payPalScriptElem></div>\r\n    <div #payPalButtonContainerElem [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n})\r\nexport class NgxPaypalComponent implements OnChanges, AfterViewChecked {\r\n\r\n    /**\r\n     * Configuration for paypal.\r\n     */\r\n    @Input() config: PayPalConfig;\r\n\r\n    /**\r\n     * Indicates if global configuration (provided via 'forRoot') is used\r\n     */\r\n    @Input() useGlobalConfig = false;\r\n\r\n    /**\r\n     * Container for paypal script\r\n     */\r\n    @ViewChild('payPalScriptElem') paypalScriptElem: ElementRef;\r\n\r\n    /**\r\n     * Used for indicating delayed rendered if container is not yet ready in DOM\r\n     */\r\n    private registerPayPalScriptWhenContainerIsReady = false;\r\n\r\n    /**\r\n     * Holds current container element\r\n     */\r\n    private _payPalButtonContainerElem?: ElementRef;\r\n    @ViewChild('payPalButtonContainerElem') set payPalButtonContainerElem(content: ElementRef) {\r\n        if (content) {\r\n            this._payPalButtonContainerElem = content;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Name of the global variable where paypal is stored\r\n    */\r\n    private readonly paypalWindowName = 'paypal';\r\n\r\n    /**\r\n     * PayPal integration script url\r\n     */\r\n    private readonly paypalScriptUrl = 'https://www.paypalobjects.com/api/checkout.js';\r\n\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     */\r\n    public payPalButtonContainerId?: string;\r\n\r\n    private readonly payPalButtonContainerIdPrefix = 'ngx-paypal-button-container-';\r\n\r\n    constructor(\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // init when config once its available\r\n        if (this.config) {\r\n            this.initPayPal();\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        // register script if element is ready in dom\r\n        if (this.registerPayPalScriptWhenContainerIsReady && this._payPalButtonContainerElem) {\r\n            this.setupScript();\r\n            this.registerPayPalScriptWhenContainerIsReady = false;\r\n        }\r\n    }\r\n\r\n    private initPayPal(): void {\r\n        // set unique paypal container button id\r\n        this.payPalButtonContainerId = `${this.payPalButtonContainerIdPrefix}${this.getPseudoUniqueNumber()}`;\r\n        // check if paypal was already register and if so, don't add it to page again\r\n        if (!window[this.paypalWindowName]) {\r\n            // register script\r\n            this.addPaypalScriptToPage();\r\n        } else {\r\n            // just register payment\r\n            this.handleScriptRegistering();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().valueOf();\r\n    }\r\n\r\n    private addPaypalScriptToPage(): void {\r\n        const script = document.createElement('script');\r\n        script.innerHTML = '';\r\n        script.src = this.paypalScriptUrl;\r\n        script.onload = () => this.handleScriptRegistering();\r\n        script.async = true;\r\n        script.defer = true;\r\n\r\n        this.paypalScriptElem.nativeElement.appendChild(script);\r\n    }\r\n\r\n    private handleScriptRegistering(): void {\r\n        // check if container with requested id exists\r\n        // this is here because dynamically switching between components would cause PayPal to\r\n        // throw an error if the container already existed before\r\n        if (this._payPalButtonContainerElem && this._payPalButtonContainerElem.nativeElement &&\r\n            this._payPalButtonContainerElem.nativeElement.id === this.payPalButtonContainerId) {\r\n            // container is ready, setup script right away\r\n            this.setupScript();\r\n        } else {\r\n            // container is not ready, delay registering until it is\r\n            this.registerPayPalScriptWhenContainerIsReady = true;\r\n        }\r\n    }\r\n\r\n    private setupScript(): void {\r\n        // first clear container\r\n        if (!this._payPalButtonContainerElem) {\r\n            throw Error(`Cannot setup script because paypal button container with id '${this.payPalButtonContainerId}' is not yet ready`);\r\n        }\r\n\r\n        this._payPalButtonContainerElem.nativeElement.innerHTML = '';\r\n\r\n        // render PayPal button as per their docs at\r\n        // https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/\r\n        paypal.Button.render({\r\n            // set environment\r\n            env: this.config.environment.toString(),\r\n\r\n            // Show the buyer a 'Pay Now' button in the checkout flow\r\n            commit: this.config.commit,\r\n\r\n            // init client for client side integration\r\n            client: this.getClient(),\r\n\r\n            // set button config if available\r\n            style: this.config.button,\r\n\r\n            // set funding if available\r\n            funding: this.getFunding(),\r\n\r\n            // payment() is called when the button is clicked\r\n            payment: (data, actions) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to create payment on server side\r\n                    if (!this.config.payment) {\r\n                        throw Error(`You need set up a create payment method and return\r\n                            PayPal's payment id when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise with payment id (string) to be returned\r\n                    return this.config.payment().toPromise()\r\n                        .then(paymentId => {\r\n                            return paymentId;\r\n                        });\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    if (!this.config.transactions || !Array.isArray(this.config.transactions) || this.config.transactions.length <= 0) {\r\n                        throw Error(`You need to provide at least 1 transaction for client side integration`);\r\n                    }\r\n\r\n                    return actions.payment.create({\r\n                        payment: {\r\n                            transactions: this.config.transactions\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n\r\n            // onAuthorize() is called when the buyer approves the payment\r\n            onAuthorize: (data: IPayPalPaymentCompleteData, actions: any) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to server to execute the payment\r\n                    if (!this.config.onAuthorize) {\r\n                        throw Error(`You need set up an execute method when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise\r\n                    return this.config.onAuthorize(data, actions).toPromise();\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    // Make a call to the REST api to execute the payment\r\n                    return actions.payment.execute().then(() => {\r\n                        if (!this.config.onPaymentComplete) {\r\n                            throw Error(`You should provide some callback when payment is finished when using client side integration`);\r\n                        }\r\n                        this.config.onPaymentComplete(data, actions);\r\n                    });\r\n                }\r\n            },\r\n\r\n            onError: (err) => {\r\n                if (this.config.onError) {\r\n                    this.config.onError(err);\r\n                }\r\n            },\r\n\r\n            onCancel: (data, actions) => {\r\n                if (this.config.onCancel) {\r\n                    this.config.onCancel(data, actions);\r\n                }\r\n            }\r\n        }, `#${this.payPalButtonContainerId}`);\r\n    }\r\n\r\n    private getClient(): IPaypalClient | undefined {\r\n        if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n            if (!this.config.client) {\r\n                throw Error(`You need to setup client information when using client side integration`);\r\n            }\r\n\r\n            return {\r\n                production: this.config.client.production,\r\n                sandbox: this.config.client.sandbox\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getFunding(): {\r\n        allowed: any[],\r\n        disallowed: any[]\r\n    } | undefined {\r\n        // resolve funding to use paypal's properties\r\n        if (!this.config.funding) {\r\n            // no funding provided\r\n            return undefined;\r\n        }\r\n\r\n        const allowed: any[] = [];\r\n        const disallowed: any[] = [];\r\n\r\n        if (this.config.funding.allowed) {\r\n            this.config.funding.allowed.forEach(type => {\r\n                allowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        if (this.config.funding.allowed) {\r\n            this.config.funding.allowed.forEach(type => {\r\n                allowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        return {\r\n            allowed: allowed,\r\n            disallowed: disallowed\r\n        };\r\n    }\r\n\r\n    private mapFundingType(type: PayPalFunding): any {\r\n        if (type === PayPalFunding.Card) {\r\n            return paypal.FUNDING.CARD;\r\n        }\r\n        if (type === PayPalFunding.Credit) {\r\n            return paypal.FUNDING.CREDIT;\r\n        }\r\n        if (type === PayPalFunding.Elv) {\r\n            return paypal.FUNDING.ELV;\r\n        }\r\n        throw Error(`Unsupported funding type '${type}'`);\r\n    }\r\n}\r\n\r\n","/** Public API */\r\nexport * from './models/paypal-models';\r\nexport * from './components/paypal-component';\r\nexport * from './ngx-paypal.module';\r\nexport * from './models/paypal-environment';\r\nexport * from './models/paypal-funding';\r\nexport * from './models/paypal-integration';\r\n","export enum PayPalEnvironment {\r\n\r\n    Sandbox = 'sandbox',\r\n    Production = 'production'\r\n\r\n}\r\n","export enum PayPalFunding {\r\n    Card,\r\n    Credit,\r\n    Elv\r\n}\r\n","export enum PayPalIntegrationType {\r\n\r\n    ClientSideREST,\r\n    ServerSideREST,\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { PayPalFunding } from '..';\r\nimport { PayPalEnvironment } from './paypal-environment';\r\nimport { PayPalIntegrationType } from './paypal-integration';\r\n\r\nexport class PayPalConfig {\r\n\r\n    /**\r\n     * Show 'Pay Now' button config\r\n     */\r\n    public commit = true;\r\n\r\n    /**\r\n     * Called to create new payment for server side integration\r\n     */\r\n    public payment?: () => Observable<string>;\r\n\r\n    /**\r\n     * Called to execute payment for server side integration\r\n     */\r\n    public onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>;\r\n\r\n    /**\r\n     * Client tokens for client side integration\r\n     */\r\n    public client?: IPaypalClient;\r\n\r\n    /**\r\n     * Array of transaction, required for client side integration\r\n     */\r\n    public transactions?: IPayPalTransaction[];\r\n\r\n    /**\r\n     * Called for client side integration when payment is executed\r\n     */\r\n    public onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void;\r\n\r\n    /**\r\n     * Button configuration\r\n     */\r\n    public button?: IPayPalButtonStyle;\r\n\r\n    /**\r\n     * Paypal funding configuration\r\n     */\r\n    public funding?: IPayPalFunding;\r\n\r\n    /**\r\n     * Called when PayPal experiences an error\r\n     */\r\n    public onError?: (err: any) => void;\r\n\r\n    /**\r\n     * Called when user cancels payment\r\n     */\r\n    public onCancel?: (data: IPayPalCancelPayment, actions: any) => void;\r\n\r\n    constructor(\r\n        /**\r\n         * Type of the integration\r\n         */\r\n        public integrationType: PayPalIntegrationType,\r\n        /**\r\n         * Environment\r\n         */\r\n        public environment: PayPalEnvironment,\r\n        config: {\r\n            onError?: (err: any) => void,\r\n            onCancel?: (data: IPayPalCancelPayment, actions: any) => void,\r\n            payment?: () => Observable<string>,\r\n            onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>,\r\n            client?: IPaypalClient,\r\n            onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void,\r\n            transactions?: IPayPalTransaction[],\r\n            commit?: boolean,\r\n            button?: IPayPalButtonStyle,\r\n            funding?: IPayPalFunding\r\n        }) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n\r\nexport interface IPayPalPaymentCompleteData {\r\n    intent: string;\r\n    orderID: string;\r\n    payerID: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n    returnUrl: string;\r\n}\r\n\r\nexport interface IPayPalCancelPayment {\r\n    data: IPayPalCancelPaymentData;\r\n    actions: any;\r\n}\r\n\r\nexport interface IPayPalCancelPaymentData {\r\n    billingID: string;\r\n    cancelUrl: string;\r\n    intent: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n}\r\n\r\nexport interface IPaypalClient {\r\n    sandbox?: string;\r\n    production?: string;\r\n}\r\n\r\nexport interface IPayPalTransaction {\r\n    amount: IPayPalAmount;\r\n}\r\n\r\nexport interface IPayPalAmount {\r\n    total: number;\r\n    currency: string;\r\n}\r\n\r\nexport interface IPayPalButtonStyle {\r\n    label?: 'checkout' | 'pay' | 'buynow' | 'paypal';\r\n    size?: 'small' | 'medium' | 'large' | 'responsive';\r\n    shape?: 'pill' | 'rect';\r\n    color?: 'gold' | 'blue' | 'silver' | 'black';\r\n    tagline?: false;\r\n    fundingicons?: boolean;\r\n    branding?: boolean;\r\n}\r\n\r\nexport interface IPayPalFunding {\r\n    allowed: PayPalFunding[];\r\n    disallowed: PayPalFunding[];\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { NgxPaypalComponent } from './components/paypal-component';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  exports: [\r\n    NgxPaypalComponent,\r\n  ]\r\n})\r\nexport class NgxPayPalModule {\r\n}\r\n\r\n\r\n"],"sourceRoot":""}